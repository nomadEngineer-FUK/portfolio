/**
 * 進行中の支払申請（※１）をオブジェクト化（appliesInProgress）して取得（【関数】extractInProgress　の実行）
 *    ※１：ステータス = 進行中
 * 
 * リマインド対象の支払申請を、進行中の支払申請のオブジェクトから取得（※２）
 *    ※２：進行中の申請のうち、現在の承認ステップ名 ＝ ディレクターステップ　であるもの
 * 
 * 集計する部門（以降、申請チーム　と呼びます）をシート：マスタ　から2次元配列にて取得（masterOfApplyTeams）
 * 申請チームをfor-ofでループ処理
 * 
 * リマインド対象の支払申請オブジェクトが保有する値をループ処理
 * オブジェクトが持つ申請チーム　と　集計のための申請チーム（masterOfApplyTeams）が一致する時、
 * リマインド用の変数（combinedChar）に、対象となる申請Noと取引先を格納
 * 一つの申請チーム分の処理が完了したら、リマインド用変数をスプレッドシートへ出力（※３）する
 *    ※３：シート：リマインド　のC列
 */

function extractRemindInfo() {

  // 【関数】extractInProgress　を実行（該当関数はファイル：03_func_manageData.gs）
  // 未承認の支払申請をオブジェクトで取得
  const appliesInProgress = extractInProgress();

  // 担当ステップ = ディレクターステップ を取得
  const director = 'ディレクターステップ';

  // ディレクターが未承認の支払申請を取得
  const appliesInDirector = appliesInProgress.filter(record => record['現在の承認ステップ名'] == director);
  // Logger.log(appliesInDirector);

  // 集計項目である申請チーム毎にループ処理
  for (masterOfApplyTeam of masterOfApplyTeams) {

    // リマインドとして出力するための文言を格納する変数を用意
    let combinedChar = '';

    // リマインド対象の支払申請を順にループ処理
    for (const value of Object.values(appliesInDirector)) {

      // リマインド対象の支払申請の「申請チーム」が、マスタ（集計項目）の申請チームと同じ場合
      if (masterOfApplyTeam == value['申請チーム']) {

        // 支払申請No　と　取引先　を取得
        let val1 = 'No.' + value['申請No'];
        let val2 = '：' + value['取引先'];

        // 出力用に文字列を結合（結合するごとに改行する）
        combinedChar = combinedChar + val1 + val2 + '\n';
      }
    }
    // Logger.log(masterOfApplyTeam);

    // 出力用の文字列の最後に改行が入っているので、その改行を削除
    if (combinedChar.slice(-1) === '\n') {
      combinedChar = combinedChar.slice(0, -1);
    }

    // スプレッドシートへ出力
    remindSheet.getRange(masterOfApplyTeams.indexOf(masterOfApplyTeam) + 2, 3).setValue(combinedChar);
  }
}
