/**
 * シート：元データ　が編集されたら関数：executeAllFuncを実行する
 */

function execute() {
  // 編集されたシートが、「元データ」の場合
  if (editSheet == sheet.getSheetName()) {

    // 【関数】executeAllFunc　を実行する
    executeAllFunc();
  }
}


/**
 * 本プロジェクトにて実装した関数を実行するためのトリガーをまとめて管理
 */
function executeAllFunc() {

  /**
   * 【実行結果】未承認の支払申請を、担当ステップ別（ディレクター、経理担当者、経理責任者）で出力する
   * 【出力場所】シート：サマリ　の 現在の承認ステップ名（C5～C7セル）
   * 【関数保管ファイル】03_func_summary.gs
   */
  // 【関数】countByDeptInCharge　を実行
  const { cnt1, cnt2, cnt3 } = countByDeptInCharge();

  // 集計結果をスプレッドシートへ出力
  summarySheet.getRange("C5").setValue(cnt1);
  summarySheet.getRange("C6").setValue(cnt2);
  summarySheet.getRange("C7").setValue(cnt3);


  /**
   * 【実行結果】未承認の支払申請を母数として、申請チーム　と　支払期日　とでクロス集計し、その結果をスプレッドシートへ出力する
   * 【出力場所】シート：サマリ　の 申請チーム（D12～G18セル） 
   * 【関数保管ファイル】03_func_summary.gs
   */
  // 【関数】countByApplyTeam　を実行
  const applyTeams = countByApplyTeam();

  // applyTeamsをスプレッドシートへ出力
  summarySheet.getRange(12, 4, applyTeams.length, 4).setValues(applyTeams);


  /**
   * 【実行結果】リマインド対象の支払申請（※１）の申請データを、申請チーム別に出力する
   * 【出力場所】シート：リマインド　の   申請No：取引先（C2～C8セル）
   * 【関数保管ファイル】03_func_remind.gs
   * 
   * ※１：リマインド対象の支払申請
   *   ディレクターが未承認の支払申請のこと。（下記２条件を同時に満たす場合）
   * 　  └ カラム：ステータス          ＝ 進行中
   * 　  └ カラム：現在の承認ステップ名 ＝ ディレクターステップ
   */

  // 呼び出し元の関数にて出力まで完結
  extractDetailOfApply();
}
