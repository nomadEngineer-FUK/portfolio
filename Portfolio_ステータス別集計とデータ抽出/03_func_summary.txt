/**
 * オブジェクト化された進行中の支払申請（appliesInProgress）を取得（【関数】extractInProgress　の実行）
 * 上記で取得したオブジェクトをループ処理
 * 
 * 進行中の支払申請を、カラム：現在の承認ステップ名（下記３種）　別で集計
 *  >> cnt1：ディレクターステップ
 *  >> cnt2：財務経理担当者ステップ
 *  >> cnt3：財務経理責任者ステップ
 * 
 * 集計結果（cnt1, cnt2, cnt3）をreturn
 * 　※returnの結果は、スクリプトファイル：main.gsの「★実行１★」にて呼び出され、スプレッドシートのシート：サマリに出力
 * 
 * @return {number} 承認ステップ別の進行中の申請件数
 */
function countByDeptInCharge() {

  // 【関数】extractInProgress　を実行（該当関数はファイル：03_func_manageData.gs）
  // 進行中の支払申請をオブジェクトで取得
  const appliesInProgress = extractInProgress();

  // 件数カウントのための変数をそれぞれ用意
  // cnt1：ディレクターステップ
  // cnt2：財務経理担当者ステップ
  // cnt3：財務経理責任者ステップ
  let [cnt1, cnt2, cnt3] = [0, 0, 0]

  // 進行中の支払申請をループ処理
  for (const value of Object.values(appliesInProgress)) {

    // 3段階の承認ステップ別でカウント
    if (value["現在の承認ステップ名"] == 'ディレクターステップ') {
      cnt1 = cnt1 + 1

    } else if ((value["現在の承認ステップ名"] == '財務経理担当者ステップ')) {
      cnt2 = cnt2 + 1;

    } else if ((value["現在の承認ステップ名"] == '財務経理責任者ステップ')) {
      cnt3 = cnt3 + 1;
    }
  }

  return { cnt1, cnt2, cnt3 };
}


/**
 * オブジェクト化された進行中の支払申請（appliesInProgress）を取得（【関数】extractInProgress　の実行）
 * 集計する部門（以降、申請チーム　と呼びます）をシート：マスタ　から2次元配列にて取得（masterOfApplyTeams）
 * 
 * 申請チームをfor-ofでループ処理
 * 進行中の支払申請（appliesInProgress）を、「申請チーム」 × 「支払期日（※）」　でクロス集計
 * 
 * 　※支払期日の基準は下記４つ
 *    >> num1：支払期日 = 超過
 *    >> num2：支払期日 = 当月の月中
 *    >> num3：支払期日 = 当月末
 *    >> num4：支払期日 = 翌月以降
 * 
 * 申請チーム毎のループ処理が終了した段階で、集計結果（num1, num2, num3, num4）を申請チームの配列（masterOfApplyTeams）に追加しそれをreturn
 * 　※returnの結果は、スクリプトファイル：main.gsの「★実行２★」にて呼び出し、スプレッドシートのシート：サマリに出力
 *
 * @return {array} 未承認の支払申請を母数として、「申請チーム」 × 「支払期日」　をクロス集計した結果
 */
function countByApplyTeam() {

  // 【関数】extractInProgress　を実行（該当関数はファイル：03_func_manageData.gs）
  // 進行中の支払申請をオブジェクトで取得
  const appliesInProgress = extractInProgress();

  // 集計項目である申請チーム毎にループ処理
  for (masterOfApplyTeam of masterOfApplyTeams) {

    // 件数カウントのための変数を用意
    // num1：支払期日 = 超過
    // num2：支払期日 = 当月の月中
    // num3：支払期日 = 当月末
    // num4：支払期日 = 翌月以降
    let [num1, num2, num3, num4] = [0, 0, 0, 0];

    // 進行中の支払申請を順にループ処理
    for (const value of Object.values(appliesInProgress)) {

      // 未承認の支払申請の「申請チーム」が、マスタ（集計項目）の申請チームと同じ場合に集計
      if (masterOfApplyTeam == value['申請チーム']) {

        // 支払期日が超過している
        if (value["支払期日"] < today) {
          num1 = num1 + 1;
          // Logger.log('期日超過' + value["支払期日"]);

          // 支払期日が今月の月中（イレギュラー案件のため要集計）
        } else if (value["支払期日"].getTime() < endOfMonth.getTime()) {
          num2 = num2 + 1;
          // Logger.log('当月の月中' + value["支払期日"]);

          // 支払期日が今月末
        } else if (value["支払期日"].getTime() == endOfMonth.getTime()) {
          num3 = num3 + 1;
          // Logger.log('当月末' + value["支払期日"]);

          // 上記以外（支払期日が翌月以降）
        } else {
          num4 = num4 + 1;
          // Logger.log('翌月以降の支払期日' + value["支払期日"]);
        }
      }
    }

    // 各申請チーム別のループ処理が最後まで終了した段階で、集計結果を申請チームマスタの配列に追加
    masterOfApplyTeam.push(num1, num2, num3, num4)
    // Logger.log(masterOfApplyTeam);
  }

  // 進行中の支払申請をクロス集計した結果を格納している配列：masterOfApplyTeamsの0番目の要素（部門名）を配列から削除（1～4番目の要素を残す）
  const countAppliesInProgress = masterOfApplyTeams.map(
    masterOfApplyTeam => masterOfApplyTeam.splice(1, 4)
  )

  // 下記条件のもと集計した結果をreturn
  // 1. 未承認である支払申請が集計の対象
  // 2. 申請チーム　と　支払期日　とでクロス集計　
  return countAppliesInProgress;
}
